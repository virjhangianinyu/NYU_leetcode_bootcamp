class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if len(t)>len(s):
            return ""

        window ={}
        countT = {}
        min_l  = float(inf)
        l = 0

        for c in t:
            countT[c] = 1+countT.get(c,0)

        need, have = len(countT), 0
        result = [0,0]
        for r in range(len(s)):
            
            window[s[r]] = 1+ window.get(s[r],0)
            
            if s[r] in countT and window[s[r]] == countT[s[r]]:
                have +=1

            while need == have:
                if(r-l+1<min_l):
                    min_l = r-l+1
                    result = [l,r]
                window[s[l]] -=1
                 
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                    have -=1
                l+=1    
                    
        if min_l <float(inf):

            return s[result[0]:result[1]+1]
        else:
            return ""